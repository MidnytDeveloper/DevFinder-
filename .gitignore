node_modules


// getting user by email Id using get request :
app.get("/user", async (req, res) => {
  const userMail = req.body.emailId;
  try {
    const users = await User.findOne({ emailId: userMail });
    if (!users) {
      res.status(404).send("User Not Found");
    } else {
      res.send(users);
    }
  } catch (err) {
    res.status(404).send("Something went wrong");
  }
});

// Feed Api - getting all the users
app.get("/allUser", async (req, res) => {
  try {
    const users = await User.find({});
    res.send(users);
  } catch (err) {
    res.status(400).send("Something went wrong");
  }
});

// delete a user by id
app.delete("/deleteUser", async (req, res) => {
  const userId = req.body.userId;
  try {
    const user = await User.findByIdAndDelete(userId);
    console.log(user);
    res.send("User Deleted Successfully");
  } catch (err) {
    res.status(404).send("Something went wrong");
  }
});

// partial update a user by patch

// basic
app.patch("/patchUpdate", async (req, res) => {
  const userId = req.body.userId;
  const data = req.body;
  console.log(data);
  try {
    await User.findByIdAndUpdate(userId, data);
    res.send("A user updated successfully");
  } catch (err) {
    res.status(404).send("Something went wrong");
  }
});

// Advanced - restricted Update in database
app.patch("/patch", async (req, res) => {
  const userId = req.body.userId;
  const data = req.body;
  console.log(data);
  try {
    const ALLOWED_UPDATES = [
      "userId",
      "photoUrl",
      "about",
      "gender",
      "age",
      "skills",
      "lastName",
    ];

    const isUpdateAllowed = Object.keys(data).every((k) =>
      ALLOWED_UPDATES.includes(k)
    );

    if (!isUpdateAllowed) {
      throw new Error("Update Not allowed");
    }

    const user = await User.findByIdAndUpdate(userId, data, {
      runValidators: true,
    });
    res.send("user updated successfully");
  } catch (err) {
    res.status(400).send("Update Failed" + err.message);
  }
});